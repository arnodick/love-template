YES
	list of breaking changes:
	
	Removed the default source type for love.audio.newSource.
    Removed Source:isStopped and Source:isPaused. Use Source:isPlaying instead.
    Removed Source:rewind. Use Source:stop or Source:seek(0) instead.
    Removed Source:resume and love.audio.resume. Use Source:play and love.audio.play instead.
    Removed variant of love.filesystem.newFileData which takes base64 data, use love.data.decode instead.
    Removed the no-argument variant of Text:set, use Text:clear instead.
    Removed Image:getData and Image:refresh, use Image:replacePixels instead.
    Removed love.graphics.getCompressedImageFormats, use love.graphics.getImageFormats instead.
    Removed the 'void effects(...)' pixel shader entry point. Use the new 'void effect()' instead.
    Removed Shader:getExternVariable, use Shader:hasUniform instead.
    Removed love.graphics.newScreenshot, use love.graphics.captureScreenshot instead.
    Removed SpriteBatch:setBufferSize, spritebatches now automatically grow when they run out of space.
    Removed deprecated enet function host:socket_get_address.
    Removed functions deprecated in LÃ–VE 0.10.2:
    Removed undocumented Shader:sendInt, Shader:sendBoolean, Shader:sentFloat, Shader:sendMatrix, and Shader:sendTexture methods (use Shader:send instead).
    Removed love.window.isCreated (use love.window.isOpen instead).
	Changed all color values to be in the range 0-1, rather than 0-255. This affects the following functions:
	    love.graphics.setColor, love.graphics.getColor, love.graphics.setBackgroundColor, and love.graphics.getBackgroundColor.
	    SpriteBatch:setColor and SpriteBatch:getColor.
	    ParticleSystem:setColors and ParticleSystem:getColors.
	    love.graphics.clear.
	    love.graphics.newMesh, Mesh:setVertex, and Mesh:getVertex.
	    The colored text variants of love.graphics.print, love.graphics.printf, love.graphics.newText, Text:set, Text:setf, Text:add, and Text:addf.
	    Shader:sendColor.
	    love.graphics.points.
	    ImageData:setPixel, ImageData:getPixel, and ImageData:mapPixel.
	    love.math.gammaToLinear and love.math.linearToGamma.
	maybe other stuff in changes of v11

GET RID OF ENUMS! just use strings

clean up screen.lua stuff
	start with commenting it

make it so mouse can select shop item if it is over it
	make mouse not follow player in protosnake
		switch to follow or not follow character?
post q about canvas:newImageData slice & mipmapswrite to sprite canvas during game?
conf.lua, how is it generated? make a new one for v11
beautify json script?
	line for each value, value's values indented, tabbed so values are all in a column

how to solve problem with thumbs.db causing issues with library.load file count? just make sure thumbs.db not in there?
Put gfx in g?
make sure library.load of sfx can handle index or string keys for sounds (positional might cause problems here, because it is string indexed and we're using ipairs right now)

is sfx.positional necessary? maybe make it a game setting?
	make sfx.loadpositional and sfx.loadnotpositional, call one or the other depending?
figure out weird mouse shit, why is not showing up?
	what's going on with cursor? config setting or something else? why not drawing it?
polish up interactive fiction, make general menus
game.lua stuff, make sure nothing game specific is in there, should go in game itself instead
can WE get rid of choosing game in main, put it in config instead?
always use g.players, but make player = players[1] if singleplayer
tools folder, can it be better organized?
update nanogenmo etc with new supper.names
what is difference btwn run, supper.run, game.state.run? can they be smooshed together?
	would using supper.run be less efficient?
	how about compared to old spacetank?
		how many objects can they handle at once before slowdown?

	they run functions dynamically

make funciton inputs into transition take non-table arguments optionally
make music take string index as well
make move towards a function for actors
maybe make modes just a file
put drawmodes in map array
MAKE A ROGUELIKE VERSION OF KEYBOARD! how? it's own controller type? or just bool in normal keyboard.lua
	give keyboard a type and have it in keyboard.lua like maps, local functions
delete table in actors table
	when actor is marke for deletion, actors.delete[their index in actors] = actor
drawmode and control mode
	Drawmode 2d, roguelike (have an off grid value for actors not drawn on the grid) 
	Change mode so you are a dot moving on the background and colliding with all the pixels including the grid itself
cursor follow vs not follow actor movement, camera movement

BROKEN
figure out why xbone controller no worky?
figure out why it locks up when alt tabbing to console and back that shit is fucking ANNOYING
	joystick not loaded for multigame at startup
	hud (janky, only draws in one spot)
item.held=t or f
	can only be picked up if f
everything just becomes a module
	so person is just a module like person={}, and person.hand={}
	person.lua goes into controls.lua?
every actor puts itself in its own actor table like actor.persons
	every actor deletes itself from this same table when deleting
	no need for counters any more, because you just get length #actors.persons
	maybe make a flag to tell the actor to do this, so things like debris/clouds don't have huge pointless tables
actortemplates to actordata
	put count in each of the actordata entries
	when load actor increase the count in that actordata
	when delete, decrease that actirdata count
	basically whenever counters gets incremented or decremented
give flags.set table input, put flags.set in actor.load and input flags{} from .json
values input into actor.load can be set to go into actortemplates if it won't be changed?
maybe just make all actors into json files? then just add modules to give them behaviours etc
table of inputs for scripted movement/actions
	record player inputs and play them back
get a.speed integrated, all code working with it and vel, not actor-specific declaration
consolidate supper stuff
make it so background in protosnake transfer over to next level then get wiped away, replaced with grid
make foregrouynd, like background also doesn't redraw, draws AFTER rest of game
do WE really need flag files? could just make it a simple table if we can remove all the code from flags
make canvas gamewidth * 4 in dimensions, so every game can zoom in
test if pixel map stuff whne making debris is causing fps slowdown
ctrl+N to make new map, input sizes
keyboard vector instead of absolute
do that 30 fps thing you did with spacetank
make module inputs flexible, can take enum or string ie: EM.menu OR "menu", EMM.text OR "text"
make map.getcell return the m[y][x], takes input that says whether world x,y coords or map cell x,y coords, make current getcell into getcellcoords
module delete function, resets values that need to be set back to init value ie: flashing sprite needs to be set back to having a sprite
within game if you press pause long enough, goes to 1st person arcade that has a bunch of ther games that aren't in multigame menu
	multigame is just ONE arcade game in the arcade

fix weirdness with angle vs direction (can't remember what this is about but maybe important?)
give animations option to have string input as well as enums for their inputs, give option to take table of animations as well
table input option for transitions too, so actors can have multiple transitions
	maybe the name of the transition is the name of the value that it affects? ie: a.transition.zoom or Game.transition.speed
what is in Game? make sure no debris is left over during state changes
	what should i put in game? Spritesheet, Quads

make 2d array for multi dimensions by multiplying width by amount of Z levels ie 4x4 with 3 levels = 4x12
redo all functions to make a local {} and add functions to it and just return that
give camera movement controller
screen scaling smarter about dimensions (vertical orientation, taller than width)

console has hints, or character that talks to you through the console
massively long fake loading screen where you play a game, have to get a high score?

IF YOU NEED TO
when iterating through tables in lua, for debug printing or serialization, make a list of table ids that have been iterated through so if they show up again in the table you can not iterate through them (Game being referenced in a function within game, causing infiinite loop)
printformat: printf but with even more options like
	drop shadow
	individual character colouration
	individual character colour
	blink
	highlight?
character to corpse module, or make corpse a drop or something
Physics stun launch characters or suck them in just delete or nil their movement controller, apply force, give decel.
Depth function sort table by depth during draw if not depth hen depth = 0
make tw and th part of level?
maybe actors, levels, etc all go in state? so when you do state={} it wipes everything
maps agnostic? put it in main folder, maps can be load into any game
load state for each game?
	this replaces gamename.make
	is made in game.make instead of state.make("intro")	
	loads quick stuff in load.make
	loads slower stuff (offgrid images) in load.control
		has a bool that ensures that load stuff only runs on first frame
		make: loaded=false
		control:
			if loaded==false then
				do slow loading stuff
				loaded=true
			end
		this way can have a nice loading screen
		threads for this?
Maybe just make everything a module? Ie x y d v c alpha etc
maybe make a batch file that makes all the new folders and files for a game
Mode.make which can be done to game or level
maybe make all flags just work on the high 16 bits
input Game into module stuff
change modules to have just a table input with {variablename="whatever",x=12,etc=true}
make corpse its own thing, then just change debris into sparks
arbitrary player amounts? if you can press a button on keyboard or joystick you can add a player
make different counter types, make one for counter.t=table_counter
effect duration
make huds to go in states
animation "object"/module
	give it duration input, value. delta from start time and current time
	put blink in here
	give it a type (maybe even subtype?)
	subtype is easing function? ie: xoffset=sin(timer-delta)
	types:
		animation sprite/frames
		animation x and yoffset (has time length/duration)
		animation scale (has time length/duration)
test collision with walls, see if it needs extendo walls for high speeds
change controller input so impulses will work
	put controller commands in actor.control? Must be some way to make impulses stick

IDEAS
Load any library necessities before every other library, eg json, then don't load them during recursive stuff, since these need to be available to do any other loads besides .lua
zoom in real close to an item "ah yes, i can see all the details" but it's huge chunky pixels that are indiscernible
don't encrypt passwords, let people change it manually. make it a puzzle, say change your score to 1,465,000, unlocks a level
all the games start to blend together near the end, level modes seemingly from other games creep in to other games
puzzle: "more" should be on the menu
	make a puzzle out of the fact the text gets filled up in menu's 2nd entry if you press keys
	at one point there is a menu where the 2nd option is "mo" if you use it nothing happens, but if you type in "re" and use it, go somewhere
	when "mo" puzzle is solved, go to beautiful beach scene. press right, nothing happens, press left, hear footsteps, eventually show up on screen
isometric is a little world you can observe, creatures walk around in it and do things, but you can't affect it, only float around and look at it
YES
do WE really need flag files? could just make it a simple table if we can remove all the code from flags
make canvas gamewidth * 4 in dimensions, so every game can zoom in
test if pixel map stuff whne making debris is causing fps slowdown
ctrl+N to make new map, input sizes
keyboard vector instead of absolute
do that 30 fps thing you did with spacetank
make module inputs flexible, can take enum or string ie: EM.menu OR "menu", EMM.text OR "text"
make map.getcell return the m[y][x], takes input that says whether world x,y coords or map cell x,y coords, make current getcell into getcellcoords
module delete function, resets values that need to be set back to init value ie: flashing sprite needs to be set back to having a sprite
background for map, drawn to persistent canvas. canvas will be have to be size of entire map? and will ahve to move around with camera maybe
within game if you press pause long enough, goes to 1st person arcade that has a bunch of ther games that aren't in multigame menu
	multigame is just ONE arcade game in the arcade

fix weirdness with angle vs direction (can't remember what this is about but maybe important?)
namespace (ughhhhhh) game-specific functions, like player? so, protosnake.player instead of just player? or something to make actors game specific
	maybe just make all actors into json files? then just add modules to give them behaviours etc
give animations option to have string input as well as enums for their inputs, give option to take table of animations as well
table input option for transitions too, so actors can have multiple transitions
	maybe the name of the transition is the name of the value that it affects? ie: a.transition.zoom or Game.transition.speed
synth should be a module
what is in Game? make sure no debris is left over during state changes
	what should i put in game? Spritesheet, Quads
things that couold be modules maybe
	player as module
		put player functions in game, so protosnake.player.control
		if a.player then player.control, which runs game.state.run(gamename,"player","control")

make 2d array for multi dimensions by multiplying width by amount of Z levels ie 4x4 with 3 levels = 4x12
redo all functions to make a local {} and add functions to it and just return that
give camera movement controller
screen scaling smarter about dimensions (vertical orientation, taller than width)

IF YOU NEED TO
printformat: printf but with even more options like
	drop shadow
	individual character colouration
	individual character colour
	blink
	highlight?
character to corpse module, or make corpse a drop or something
Physics stun launch characters or suck them in just delete or nil their movement controller, apply force, give decel.
Depth function sort table by depth during draw if not depth hen depth = 0
make tw and th part of level?
maybe actors, levels, etc all go in state? so when you do state={} it wipes everything
maps agnostic? put it in main folder, maps can be load into any game
load state for each game?
	this replaces gamename.make
	is made in game.make instead of state.make("intro")	
	loads quick stuff in load.make
	loads slower stuff (offgrid images) in load.control
		has a bool that ensures that load stuff only runs on first frame
		make: loaded=false
		control:
			if loaded==false then
				do slow loading stuff
				loaded=true
			end
		this way can have a nice loading screen
		threads for this?
Maybe just make everything a module? Ie x y d v c alpha etc
maybe make a batch file that makes all the new folders and files for a game
Mode.make which can be done to game or level
maybe make all flags just work on the high 16 bits
input Game into module stuff
change modules to have just a table input with {variablename="whatever",x=12,etc=true}
make corpse its own thing, then just change debris into sparks
arbitrary player amounts? if you can press a button on keyboard or joystick you can add a player
make different counter types, make one for counter.t=table_counter
effect duration
make huds to go in states
animation "object"/module
	give it duration input, value. delta from start time and current time
	put blink in here
	give it a type (maybe even subtype?)
	subtype is easing function? ie: xoffset=sin(timer-delta)
	types:
		animation sprite/frames
		animation x and yoffset (has time length/duration)
		animation scale (has time length/duration)
test collision with walls, see if it needs extendo walls for high speeds
change controller input so impulses will work
	put controller commands in actor.control? Must be some way to make impulses stick